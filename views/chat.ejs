<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
   

    <link rel="stylesheet" href="/CSS/post.css">

    <link rel="stylesheet" href="/CSS/variables.css" />
    <link rel="icons" href="/Images/Ciphry.png">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap"
      rel="stylesheet"
    />
    <title>Chat</title>

    <link rel="icon" href="/Images/ciphry.png" />
  </head>
  <body>
    <a href="/landing">
    <div id="back">
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-chevron-left-icon lucide-chevron-left"><path d="m15 18-6-6 6-6"/></svg>
    </div>
    </a>
    <div id="page-wrapper">
      <main>
        <div class="themeToggle">
          <button id="themeToggle" class="toggle">
            <span class="switch"></span>
          </button>
        </div>
        <div id="chatContainer">
          <ul id="messageList"></ul>
          <div id="typing"></div>
          <form id="form">
            <input
              type="text"
              id="text"
              autocomplete="off"
              placeholder="Type a message..."
            />
          </form>
        </div>

        <script src="/socket.io/socket.io.js"></script>
        <script>
          const socket = io();
          const username = "<%= username %>";
          const tag = "<%= tag %>";
          socket.emit("setUser", { username, tag });
          const form = document.getElementById("form");
          form.addEventListener("submit", (e) => {
            e.preventDefault();
            const input = document.getElementById("text");
            if (input.value) {
              socket.emit("message", input.value);
              input.value = "";
              socket.emit("stopTyping");
            }
          });

          const input = document.getElementById("text");
          let typingTimer;
          input.addEventListener("input", () => {
            socket.emit("typing");
            clearTimeout(typingTimer);
            typingTimer = setTimeout(() => {
              socket.emit("stopTyping");
            }, 1000);
          });

          // Display messages
          const messageList = document.getElementById("messageList");
          socket.on("message", (data) => {
            const li = document.createElement("li");

            if (typeof data === "string") {
              li.textContent = data; // system messages
              li.classList.add("system");
            } else {
              li.textContent = `${data.username}: ${data.text}`;
              if (data.username === username) {
                li.classList.add("self");
              } else {
                li.classList.add("other");
              }
            }

            messageList.appendChild(li);
            messageList.scrollTop = messageList.scrollHeight; // auto scroll to bottom
          });

          // Show typing notification
          const typingDiv = document.getElementById("typing");
          socket.on("typing", (msg) => {
            typingDiv.textContent = msg;
          });
          socket.on("stopTyping", () => {
            typingDiv.textContent = "";
          });
        </script>
      </main>
    </div>
  </body>
</html>
<style>
  /* Base styles */
  /* Reset and base */
  * {
    box-sizing: border-box;
  }

  html,
  body {
    height: 100%;
    margin: 0;
    font-family: "Poppins", sans-serif;
    background-color: #fff; /* white background */
    color: #111;
    overflow: hidden;
    display: flex;
    flex-direction: column;
  }

  /* Full width, full height container */
  #chatContainer {
    flex-grow: 1;
    height: 100vh; /* full viewport height */
    width: 100vw; /* full viewport width */
    background: var(--White-); /* white */
    display: flex;
    flex-direction: column;
    box-shadow: none;
    border-radius: 0;
    padding-bottom: 70px; /* space for input at bottom */
  }

  /* Messages area */
  #messageList {
    flex-grow: 1;
    overflow-y: auto;
    padding: 1.5rem 2rem;
    list-style: none;
    margin: 0;
    color: #1e293b;
    scrollbar-width: thin;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
  }
  #messageList::-webkit-scrollbar {
    width: 10px;
  }
  #messageList::-webkit-scrollbar-thumb {
    background-color: #93c5fd; /* light blue thumb */
    border-radius: 10px;
  }

  /* Individual message bubbles */
  #messageList li {
    padding: 14px 20px;
    margin-bottom: 12px;
    border-radius: 24px;
    font-weight: 600;
    font-size: 1rem;
    line-height: 1.3;
    word-wrap: break-word;
    background: #2563eb;
    color: white;
    box-shadow: 0 4px 8px rgba(37, 99, 235, 0.3);
    transition: transform 0.2s ease;
    user-select: text;
    display: flex;
  }
  /* Differentiate system messages */
  #messageList li.system {
    background: transparent;
    color: #6b7280;
    font-style: italic;
    max-width: 100%;
    text-align: center;
    box-shadow: none;
    font-weight: 500;
  }

  /* Message from others */
#messageList li.other {
    background: #e0e7ff;
    color: #1e293b;
    align-self: flex-start;
}

/* Message from self (you) */
#messageList li.self {
    background: #2563eb;
    color: white;
    align-self: flex-end;
}

  /* Typing indicator */
  #typing {
    font-size: 1rem;
    color: #2563eb;
    font-style: italic;
    padding: 0 2rem 12px 2rem;
    user-select: none;
    min-height: 24px;
    padding-bottom: 38px;
    position: fixed;
    bottom: 10%;
    background: var(--White--);
    width: 100%;
    left: 0;
    right: 0;
    display: flex;
    justify-content: center;
  }
  /* Input form fixed at bottom */
  #form {
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    background: var(--White-);
    padding: 1rem 2rem;
    display: flex;
    gap: 1rem;
    border-top: 1px solid var(--White--); /* subtle light border */
    box-sizing: border-box;
    z-index: 1000;
  }

  /* Text input */
  #text {
    flex-grow: 1;
    font-size: 1.2rem;
    padding: 14px 20px;
    border-radius: 28px;

    outline: none;
    border: none;
    color: #1e293b;
    font-weight: 600;
    font-family: var(--Font-family--);
    background-color: var(--White--);
    width: 100%;
  }

  /* Focus style */
  #text:focus {
    outline: none;
  }

  /* Responsive tweaks */
  @media (max-width: 600px) {
    #form {
      padding: 1rem;
    }
    #messageList li {
      max-width: 85%;
      font-size: 0.95rem;
    }
    #text {
      font-size: 1rem;
      padding: 12px 16px;
    }
  }
  #back {
  position: fixed; /* stay in top-left corner */
  top: 20px;
  left: 20px;
  width: 40px;
  height: 40px;
  background: #2563eb; /* blue background */
  border-radius: 50%; /* round button */
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: transform 0.2s ease, background 0.2s ease;
  box-shadow: 0 4px 8px rgba(0,0,0,0.2);
}

#back:hover {
  transform: scale(1.1); /* slight pop on hover */
  background: #1e40af; /* darker blue on hover */
}

#back svg {
  width: 20px;
  height: 20px;
  stroke: white; /* make the chevron white */
}

</style>
<script>console.log("USERNAME:", "<%= username %>")</script>
<script>
  const themeToggle = document.getElementById("themeToggle");
 const themeIcon = themeToggle.querySelector("span");
 
 // Load saved theme on page load
 const savedTheme = localStorage.getItem("theme");
 if (savedTheme) {
     document.documentElement.setAttribute("data-theme", savedTheme);
     themeIcon.textContent = savedTheme === "dark" ? "‚òÄÔ∏è" : "üåô";
 }
 
 // Toggle function
 themeToggle.addEventListener("click", () => {
     const currentTheme = document.documentElement.getAttribute("data-theme");
     const newTheme = currentTheme === "dark" ? "light" : "dark";
     document.documentElement.setAttribute("data-theme", newTheme);
     localStorage.setItem("theme", newTheme); // Save theme for all pages
     themeIcon.textContent = newTheme === "dark" ? "‚òÄÔ∏è" : "üåô";
 });
 
   
   </script>
   <style>
     body{
       background-color: var(--White--);
     }
     .themeToggle {
   display: flex;
   align-items: center;
   justify-content: flex-end;
   padding: 10px;
 }
 
 #themeToggle {
   width: 60px;
   height: 30px;
   border-radius: 30px;
   border: 1px solid var(--Black--) !important;
   background-color: var(--Gray--);
   position: relative;
   cursor: pointer;
   transition: background-color 0.3s ease;
 }
 
 #themeToggle .switch {
   position: absolute;
   top: 3px;
   left: 3px;
   width: 24px;
   height: 24px;
   background-color: var(--White--);
   border-radius: 50%;
   transition: transform 0.3s ease;
 }
 
 [data-theme="dark"] #themeToggle {
   background-color: var(--Blue--) !important;
 }
 
 [data-theme="dark"] #themeToggle .switch {
   transform: translateX(30px);
 }
 
 
   
   </style>