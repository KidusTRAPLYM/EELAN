<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Monami Chat</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="/CSS/variables.css" />
    <link rel="stylesheet" href="/CSS/main.css" />
    <link rel="stylesheet" href="/CSS/post.css">
    <link rel="icon" href="/Images/ciphry.png">
    <link
      href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap"
      rel="stylesheet"
    />
    <style>
      body {
        font-family: "Poppins", sans-serif;
        
        background-color: var(--White--);
        height: 100vh; /* full screen */
      }
      .neon-glow {
        box-shadow: 0 0 10px rgba(59, 130, 246, 0.6),
          0 0 20px rgba(59, 130, 246, 0.4), 0 0 30px rgba(59, 130, 246, 0.2);
      }
      #typing-area {
        position: fixed;
        bottom: 0;
        display: flex;
        width: 100%;
        justify-content: center;
        align-items: center;
        flex-direction: column;
        background: var(--White--);
      }
      section#chat-window {
        padding-bottom: 150px; /* Reduced to avoid excessive space */
        overflow: hidden; /* Prevent scrollbar */
      }
      section#chatW {
        display: flex;
        justify-content: center;
        align-items: center;
        overflow: hidden; /* Prevent scrollbar */
      }
      textarea {
        min-height: 40px;
        max-height: 200px;
        overflow-y: auto;
      }
      .message.user {
        justify-content: flex-end;
      }
      .message.ai {
        justify-content: flex-start;
      }
      .back {
        background: var(--Black--);
        color: var(--White--);
        padding: 10px;
        width: 40px;
        height: 40px;
        border-radius: 100px;
        display: flex;
        overflow: hidden;
        justify-content: center;
        align-items: center;
      }
      .back:hover {
        border: 1px solid var(--Black--);
        width: 200px;
        transition: 0.1s ease-in;
      }
      #back-btn {
        z-index: 9999;
        position: absolute;
        top: 10%;
        left: 8%;
      }
      .flex.items-end.gap-2.bg-\[var\(--Black--\)\].p-3.rounded-2xl.neon-glow.text-\[var\(--White--\)\] {
    display: flex
;
    justify-content: center;
    align-items: center;
   
}
      .back-span {
        display: none;
      }
      .back:hover .back-span {
        display: block;
      }
      .themeToggle {
        display: flex;
        align-items: center;
        justify-content: flex-end !important;
        padding: 10px;
      }
      #themeToggle {
        width: 60px;
        height: 30px;
        border-radius: 30px;
        border: 1px solid var(--Black--) !important;
        background-color: var(--White--);
        position: relative;
        cursor: pointer;
        transition: background-color 0.3s ease;
      }
      #themeToggle .switch {
        position: absolute;
        top: 3px;
        left: 3px;
        width: 24px;
        height: 24px;
        background-color: var(--White--);
        border-radius: 50%;
        transition: transform 0.3s ease;
      }
      [data-theme="dark"] #themeToggle {
        background-color: var(--Blue--);
      }
      [data-theme="dark"] #themeToggle .switch {
        transform: translateX(30px);
      }
      /* Ensure only #chat is scrollable */
      #chat {
        padding-bottom: calc(4rem + 1rem); /* space for typing area + some buffer */
}

#form {
  border-top: 1px solid #ccc;
  padding: 10px;
}
      button.bg-blue-500.rounded-xl.shadow-lg.hover\:bg-blue-600.transition {
    width: 25px;
    height: 25px;
    display: flex
;
    justify-content: center;
    align-items: center;
}
/* Ensure button is above everything */
#scroll-btn {
  z-index: 9999;
}

/* Move it a bit higher so it’s not blocked by input */
#scroll-btn {
  bottom: 80px; /* adjust as needed */
}

    </style>
  </head>
  <body>
    <div class="themeToggle">
      <button id="themeToggle" class="toggle">
        <span class="switch"></span>
      </button>
    </div>
    <a href="/">
      <div id="back-btn">
        <button class="back">
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-chevron-left-icon lucide-chevron-left"><path d="m15 18-6-6 6-6"/></svg>
          <span class="back-span">Back to home</span>
        </button>
      </div>
    </a>
    <!-- Logo -->
    <div class="text-3xl font-bold flex justify-center items-center text-blue-500 py-4 drop-shadow-[0_0_15px_rgba(59,130,246,0.8)]">
      Monami
    </div>
    <!-- Chat Window -->
    <section id="chatW">
      <section id="chat-window" class="flex justify-center flex-col items-center max-w-2xl w-full">
        <div id="chat" class="flex flex-col w-full flex-1 p-4 space-y-4">
          <% chatHistory.forEach(c => { %>
            <div class="flex <%= c.user.toLowerCase() === 'user' ? 'justify-end' : 'justify-start' %>">
              <div class="<%= c.user.toLowerCase() === 'user' ? 'bg-blue-500' : 'bg-[var(--Black--)] ' %> text-[var(--White--)] p-3 rounded-2xl max-w-md shadow-lg">
                <%= c.text %>
              </div>
            </div>
          <% }) %>
        </div>
        <section id="typing-area" class="fixed bottom-4">
          <form id="listenForm" action="/monami" method="POST" class="w-full max-w-2xl p-4">
            <div class="flex items-end gap-2 bg-[var(--Black--)] p-3 rounded-2xl neon-glow text-[var(--White--)]">
              <textarea
                id="message"
                name="text"
                rows="1"
                placeholder="Type your feelings here..."
                class="flex-1 bg-transparent resize-none outline-none p-2 max-w-xl text-[var(--Black--)]"
                style="  overflow-y:hidden;   color: var(--White--)i !important;"
                required
              ></textarea>
              <button
                type="submit"
                class=" bg-blue-500  rounded-xl shadow-lg hover:bg-blue-600 transition"
              >
              <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-send-icon lucide-send"><path d="M14.536 21.686a.5.5 0 0 0 .937-.024l6.5-19a.496.496 0 0 0-.635-.635l-19 6.5a.5.5 0 0 0-.024.937l7.93 3.18a2 2 0 0 1 1.112 1.11z"/><path d="m21.854 2.147-10.94 10.939"/></svg>
              </button>
              <button type="button" id="new-chat-btn"  class=" bg-red-500  rounded-xl shadow-lg hover:bg-red-600 transition">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-plus-icon lucide-plus"><path d="M5 12h14"/><path d="M12 5v14"/></svg>
              </button>
            </div>
          </form>
          <!-- <form id="clearForm" action="/monami/clear" method="POST" class="max-w-2xl p-4">
            -->
          </form>
        </section>
        <!-- Scroll to Bottom Button -->
        <button
          id="scroll-btn"
          class="fixed bottom-20 left-1/2 -translate-x-1/2 bg-blue-500 text-white p-3 rounded-full shadow-lg hidden hover:bg-blue-600 transition w-12 h-12"
        >
          ⬇
        </button>
      </section>
    </section>
    <script>
     const chat = document.getElementById("chat");
const scrollBtn = document.getElementById("scroll-btn");
const listenForm = document.getElementById("listenForm");
const textarea = document.getElementById("message");

// Debug: Check if elements exist
if (!chat || !scrollBtn || !listenForm || !textarea) {
  console.error("Elements not found:", { chat, scrollBtn, listenForm, textarea });
}

// Auto expand textarea
function adjustTextareaHeight() {
  textarea.style.height = "auto";
  textarea.style.height = textarea.scrollHeight + "px";
}
textarea.addEventListener("input", adjustTextareaHeight);

// Handle Enter and Shift + Enter for form submission
textarea.addEventListener("keydown", (e) => {
  if (e.key === "Enter" && !e.shiftKey) {
    e.preventDefault();
    listenForm.submit();
  } else if (e.key === "Enter" && e.shiftKey) {
    setTimeout(adjustTextareaHeight, 0);
  }
});

// Scroll to bottom function
function scrollToBottom() {
  requestAnimationFrame(() => {
    console.log("Scrolling to bottom, scrollHeight:", chat.scrollHeight);
    chat.scrollTo({ top: chat.scrollHeight, behavior: "smooth" });
  });
}

// Show/hide scroll button based on scroll position
chat.addEventListener("scroll", () => {
  const isNotAtBottom = chat.scrollTop + chat.clientHeight < chat.scrollHeight - 50;
  console.log("Scroll position:", {
    scrollTop: chat.scrollTop,
    clientHeight: chat.clientHeight,
    scrollHeight: chat.scrollHeight,
    isNotAtBottom
  });
  if (isNotAtBottom) {
    scrollBtn.classList.remove("hidden");
  } else {
    scrollBtn.classList.add("hidden");
  }
});

// Scroll to bottom when button is clicked
scrollBtn.addEventListener("click", () => {
  console.log("Scroll button clicked, scrolling to:", chat.scrollHeight);
  chat.scrollTo({ top: chat.scrollHeight, behavior: "smooth" });
  scrollBtn.classList.add("hidden");
});

// Observe changes to chat for new messages
const observer = new MutationObserver(scrollToBottom);
observer.observe(chat, { childList: true, subtree: true });

// Scroll to bottom on page load
window.addEventListener("load", () => {
  setTimeout(scrollToBottom, 100); // Small delay to ensure DOM is ready
});

// Trigger scroll after form submission
listenForm.addEventListener("submit", () => {
  setTimeout(scrollToBottom, 100); // Short delay for DOM update
});

// Theme toggle (retained from original)
const themeToggle = document.getElementById("themeToggle");
const themeIcon = themeToggle.querySelector("span");
const savedTheme = localStorage.getItem("theme");
if (savedTheme) {
  document.documentElement.setAttribute("data-theme", savedTheme);
  themeIcon.textContent = savedTheme === "dark" ? "☀️" : "🌙";
}
themeToggle.addEventListener("click", () => {
  const currentTheme = document.documentElement.getAttribute("data-theme");
  const newTheme = currentTheme === "dark" ? "light" : "dark";
  document.documentElement.setAttribute("data-theme", newTheme);
  localStorage.setItem("theme", newTheme);
  themeIcon.textContent = newTheme === "dark" ? "☀️" : "🌙";
});

// New chat button (retained from original)
const newChatBtn = document.getElementById("new-chat-btn");
newChatBtn.addEventListener("click", () => {
  textarea.value = "";
  fetch("/monami/clear", { method: "POST" })
    .then(() => window.location.reload());
});

// Popup modal (retained from original)
window.addEventListener("load", () => {
  const popup = document.getElementById("monami-popup");
  const seen = localStorage.getItem("monamiNoticeSeen");
  if (!seen) {
    popup.classList.remove("hidden");
  }
  function closePopup() {
    popup.classList.add("hidden");
    localStorage.setItem("monamiNoticeSeen", "true");
  }
  document.getElementById("popup-close").addEventListener("click", closePopup);
  document.getElementById("popup-ok").addEventListener("click", closePopup);
});
    </script>
    <script src="/Js/post.js" defer></script>
    <!-- Popup Modal -->
<div id="monami-popup" class="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50 hidden">
  <div class="bg-white dark:bg-gray-800 p-6 rounded-2xl max-w-md w-full shadow-lg relative">
    <h2 class="text-xl font-bold mb-4 text-gray-900 dark:text-white">Welcome to Monami!</h2>
    <ul class="list-disc list-inside text-gray-700 dark:text-gray-300 mb-4">
      <li>Monami is under development.</li>
      <li>Monami doesn't save your conversation for privacy reasons.</li>
      <li>If Monami misinterprets your message, starting a new chat might help.</li>
    </ul>
    <button id="popup-close" class="absolute top-3 right-3 text-gray-500 hover:text-gray-900 dark:hover:text-white text-2xl font-bold">&times;</button>
    <button id="popup-ok" class="mt-2 w-full bg-blue-500 hover:bg-blue-600 text-white rounded-xl py-2 transition">Got it!</button>
  </div>
</div>

<script>
  window.addEventListener("load", () => {
    const popup = document.getElementById("monami-popup");
    const seen = localStorage.getItem("monamiNoticeSeen");

    if (!seen) {
      popup.classList.remove("hidden");
    }

    function closePopup() {
      popup.classList.add("hidden");
      localStorage.setItem("monamiNoticeSeen", "true");
    }

    document.getElementById("popup-close").addEventListener("click", closePopup);
    document.getElementById("popup-ok").addEventListener("click", closePopup);
  });
</script>

<style>
  /* Optional: Smooth fade-in */
  #monami-popup {
    transition: opacity 0.3s ease;
  }
  #chat {
  max-height: calc(100vh - 200px); /* Adjust based on header/footer */
  overflow-y: auto;
  padding-bottom: calc(4rem + 1rem);
}

#scroll-btn {
  z-index: 10000;
  position: fixed;
  bottom: 100px; /* Adjusted to avoid overlap with typing area */
  left: 50%;
  transform: translateX(-50%);
  display: flex;
  justify-content: center;
  align-items: center;
  cursor: pointer;
}
</style>


  </body>
</html>