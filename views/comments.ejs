<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Discuss</title>
    <link rel="stylesheet" href="/CSS/variables.css" />
    <link rel="stylesheet" href="/CSS/main.css" />
    <link rel="stylesheet" href="/CSS/postpost.css" />
        <link rel="stylesheet" href="/CSS/post.css" />
    <link rel="stylesheet" href="/CSS/dashboard.css" />
    <link rel="icon" href="/Images/ciphry.png" />
    <!--FONT FAMILY-->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap"
      rel="stylesheet"
    />
  </head>

  <body>
    <%- include('partials/navigation', { currentPage: 'feed' }) %>
    <div class="themeToggle" style="padding-top: 20px;">
      <button id="themeToggle" class="toggle">
        <span class="switch"></span>
      </button>
    </div>
    <main>
      
      <div id="loader" class="loader">
        <div class="dot"></div>
        <div class="dot"></div>
        <div class="dot"></div>
      </div>
      <script>
        window.addEventListener("load", function () {
          const loader = document.getElementById("loader");
          loader.style.opacity = 0; // fade out
          setTimeout(() => {
            loader.style.display = "none"; // remove from DOM flow
          }, 400); // match with CSS transition
        });
      </script>
      <section class="posts">
        <% const p = post; %>

        <section id="post">
          <section id="upper">
            <section id="left">
              <div class="account">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="36"
                  height="36"
                  viewBox="0 0 24 24"
                  fill="none"
                  style="color: #fff"
                  stroke="currentColor"
                  stroke-width="1"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  class="lucide lucide-user-icon lucide-user"
                >
                  <path d="M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2" />
                  <circle cx="12" cy="7" r="4" />
                </svg>
              </div>
              <div class="time">
                <span
                  ><span><%= post.userId?.name || 'Unknown User' %> </span>
                </span>
                <span><%= post.timeago || 'N/A' %></span>
              </div>
            </section>
          </section>
          <section id="down">
            <section id="text">
              <p><%= post.message %></p>
            </section>
            <section id="engagements"></section>
          </section>
        </section>
      </section>
      <section class="comment">
        <section id="comment-area">
          <h1>Note:</h1>
          <form action="/comments/<%= post._id %>/comment" method="post">
            <input type="text" name="message" id="message" class="inputS" placeholder="Use '@' to mention names"/>
            <input type="submit" value="Submit" id="submit" />
          </form>
        </section>

        <section id="comments">
          <h1>Discussions:</h1>
          <%comments.forEach(comment=>{%>

          <div class="comment-fetch">
            <h1><%= comment.userId.name%></h1>
            <p><%= comment.message%></p>
          </div>
          <%})%>
        </section>
      </section>
    </main>
     <section id="formPost">
        <form action="/post" method="Post" class="formPost">
          <div class="up">
            <h1>Create a post</h1>
          </div>
          <div class="down">
            <textarea
              name="message"
              id="monami-input"
              maxlength="500"
              placeholder="Write your post here."
            ></textarea>
            <span>  <p id="char-count">0 / 500</p></span>
          
            <!-- Character counter display -->
          <input list="post-types" name="type" placeholder="Choose the post type" />
<datalist id="post-types">
  <option value="Articles">
  <option value="Posts">
</datalist>
<div class="btns">
     <button>Post</button>
    <a href="#"><button class="cancel" type="button">Cancel</button></a>
</div>

        </form>
      </section>
 

     <script>
  const textarea = document.getElementById("monami-input");
  const charCount = document.getElementById("char-count");
  const typeInput = document.querySelector('input[name="type"]');

  // Initial character counter
  textarea.addEventListener("input", () => {
    charCount.textContent = textarea.maxLength
      ? `${textarea.value.length} / ${textarea.maxLength}`
      : `${textarea.value.length} characters`;
  });

  // Change maxlength based on post type
  typeInput.addEventListener("input", () => {
    if (typeInput.value === "Articles") {
      textarea.removeAttribute("maxlength");
    } else {
      textarea.setAttribute("maxlength", "500");
      if (textarea.value.length > 500) {
        textarea.value = textarea.value.slice(0, 500); // trim it instantly
      }
    }

    // Force update count when switching type
    charCount.textContent = textarea.maxLength
      ? `${textarea.value.length} / ${textarea.maxLength}`
      : `${textarea.value.length} characters`;
  });
</script>
<script>
  const allowed = ["Articles", "Posts"];
  typeInput.addEventListener("input", () => {
    if (!allowed.includes(typeInput.value)) {
      typeInput.setCustomValidity("Choose one of the allowed post types.");
    } else {
      typeInput.setCustomValidity("");
    }
  });
</script>
  <script>
  window.addEventListener('DOMContentLoaded', () => {
    if (window.location.hash === '#formPost') {
      history.replaceState(null, null, window.location.pathname);
    }
  });
</script>
<script src="/Js/post.js" defer></script>
  </body>
</html>
<style>
.mention {
  background-color: var(--Blue--);
  color: var(--White--);
  font-weight: 600;
  cursor: pointer;
}
.inputS {
  border: 1px solid rgba(0,0,0,0.1)!important;            /* Default black border */
  padding: 8px 12px !important;
  border-radius: 6px !important;
  outline: none !important;                     /* Removes browser glow */
  transition: border-color 0.2s ease, box-shadow 0.2s ease !important;
}

.inputS:hover {
  border-color: var(--Blue--) I !important;       /* Hover: blue border */
}

.inputS:focus {
  outline: var(--Blue--) !important;
  border-color: var(--Blue--) !important;       /* Focus (while typing): blue border */
  box-shadow: 0 0 0 3px rgba(28, 116, 228, 0.2) !important; /* Subtle glow */
}


.mention-popup {
  position: fixed;
  top: 20%;
  left: 50%;
  transform: translateX(-50%);
  background: #fff;
  color: #111;
  border: 2px solid #1c74e4;
  padding: 16px 20px;
  border-radius: 8px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
  z-index: 1000;
  font-family: Poppins, sans-serif;
  animation: fadeIn 0.2s ease-in-out;
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translate(-50%, -30%);
  }
  to {
    opacity: 1;
    transform: translate(-50%, 0%);
  }
}

</style>
<script>
  window.addEventListener('DOMContentLoaded', () => {
    const commentParagraphs = document.querySelectorAll('#comments .comment-fetch p');

    commentParagraphs.forEach(p => {
      const text = p.textContent;

      // Turn @mentions into span.mention
      const formatted = text.replace(/(@\w+)/g, '<span class="mention">$1</span>');
      p.innerHTML = formatted;
    });

    // Add click event to all mentions
    document.addEventListener('click', (e) => {
      if (e.target.classList.contains('mention')) {
        showMentionPopup();
      }
    });

    function showMentionPopup() {
      // Remove any existing popup first
      const existing = document.querySelector('.mention-popup');
      if (existing) existing.remove();

      const popup = document.createElement('div');
      popup.classList.add('mention-popup');
      popup.textContent = 'Ciphree is anonymous ‚Äî no profiles for mentions.';

      document.body.appendChild(popup);

      // Auto-hide after 3 seconds
      setTimeout(() => popup.remove(), 3000);
    }
  });
</script>
<style>
  svg.lucide.lucide-user-icon.lucide-user {
    display: flex
;
    justify-content: center;
    align-items: center;
    width: 100%;
    height: 85%;
}
</style>
<script>
  const themeToggle = document.getElementById("themeToggle");
 const themeIcon = themeToggle.querySelector("span");
 
 // Load saved theme on page load
 const savedTheme = localStorage.getItem("theme");
 if (savedTheme) {
     document.documentElement.setAttribute("data-theme", savedTheme);
     themeIcon.textContent = savedTheme === "dark" ? "‚òÄÔ∏è" : "üåô";
 }
 
 // Toggle function
 themeToggle.addEventListener("click", () => {
     const currentTheme = document.documentElement.getAttribute("data-theme");
     const newTheme = currentTheme === "dark" ? "light" : "dark";
     document.documentElement.setAttribute("data-theme", newTheme);
     localStorage.setItem("theme", newTheme); // Save theme for all pages
     themeIcon.textContent = newTheme === "dark" ? "‚òÄÔ∏è" : "üåô";
 });
 
   
   </script>
   <style>
     body{
       background-color: var(--White--);
     }
     .themeToggle {
   display: flex;
   align-items: center;
   justify-content: flex-end;
   padding: 10px;
 }
 
 #themeToggle {
   width: 60px;
   height: 30px;
   border-radius: 30px;
   border: 1px solid var(--Black--) !important;
   background-color: var(--Gray--);
   position: relative;
   cursor: pointer;
   transition: background-color 0.3s ease;
 }
 
 #themeToggle .switch {
   position: absolute;
   top: 3px;
   left: 3px;
   width: 24px;
   height: 24px;
   background-color: var(--White--);
   border-radius: 50%;
   transition: transform 0.3s ease;
 }
 
 [data-theme="dark"] #themeToggle {
   background-color: var(--Blue--) !important;
 }
 
 [data-theme="dark"] #themeToggle .switch {
   transform: translateX(30px);
 }
 
 
   
   </style>