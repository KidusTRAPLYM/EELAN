<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Search</title>

    <link rel="stylesheet" href="/CSS/post.css">
    <link rel="stylesheet" href="/CSS/main.css" />
    <link rel="stylesheet" href="/CSS/variables.css" />
      <link rel="icon" href="/Images/ciphry.png">
       <link href="https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap" rel="stylesheet">
       <meta name="description" content="Discover posts that emotionally resonate with you — find people who feel like you do.">
 
     <!-- Open Graph / Facebook -->
     <meta
       property="og:title"
       content="Ciphree — Share Your True Feelings, Connect, and Heal"
     />
     <meta
       property="og:description"
       content="Ciphree is your emotional outlet. Share joy or pain anonymously and connect with others who understand. Real feelings. Real people."
     />
     <meta property="og:url" content="https://ciphree.com/" />
     <meta property="og:type" content="website" />
     <meta property="og:image" content="https://ciphree.com/Images/ciphry.png" />
 
     <!-- Twitter -->
     <meta name="twitter:card" content="summary_large_image" />
     <meta
       name="twitter:title"
       content="Ciphree — Share Your True Feelings, Connect, and Heal"
     />
     <meta
       name="twitter:description"
       content="Ciphree is your emotional outlet. Share joy or pain anonymously and connect with others who understand. Real feelings. Real people."
     />
     <meta
       name="twitter:image"
       content="https://ciphree.com/Images/ciphry.png"
     />
 
     <!-- Fonts and Tailwind -->
     <link
       href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap"
       rel="stylesheet"
     />
     <script src="https://cdn.tailwindcss.com"></script>
     <script>
       tailwind.config = {
         theme: {
           extend: { fontFamily: { poppins: ["Poppins", "sans-serif"] } },
         },
       };
     </script>

 
     <!-- Google Analytics -->
     <script async src="https://www.googletagmanager.com/gtag/js?id=G-MM8VSWME23"></script>
     <script>
       window.dataLayer = window.dataLayer || [];
       function gtag(){dataLayer.push(arguments);}
       gtag('js', new Date());
       gtag('config', 'G-MM8VSWME23');
     </script>
  </head>
  <body>
    <div id="loader" class="loader">
      <div class="dot"></div>
      <div class="dot"></div>
      <div class="dot"></div>
    </div>
    <script>
      window.addEventListener("load", function () {
        const loader = document.getElementById("loader");
        loader.style.opacity = 0; // fade out
        setTimeout(() => {
          loader.style.display = "none"; // remove from DOM flow
        }, 400); // match with CSS transition
      });
    </script>
   <%- include('partials/navigation', { currentPage: 'matchup' }) %>
<div id="page-wrapper">


<main>
  <div class="themeToggle">
    <button id="themeToggle" class="toggle">
      <span class="switch"></span>
    </button>
  </div>
    <div class="container">
                        <h1>Resonate</h1>
      <form action="/chat" id="form" method="post">
      <input type="text" name="username" id="username" placeholder="Your name"/>
      <section id="tag">
        <label for="tagSelect">How are you feeling?</label>
       
        <input
          list="tags"
          id="tagInput"
          name="tagInput"
          placeholder="Type or select a tag"
        />

   <datalist id="tags">
  <!-- Positive Emotions -->
  <option value="Joy"></option>
  <option value="Happiness"></option>
  <option value="Excitement"></option>
  <option value="Gratitude"></option>
  <option value="Hope"></option>
  <option value="Relief"></option>
  <option value="Peace"></option>
  <option value="Love"></option>
  <option value="Affection"></option>
  <option value="Elation"></option>
  <option value="Pride"></option>
  <option value="Amusement"></option>
  <option value="Confidence"></option>
  <option value="Satisfaction"></option>
  <option value="Fulfillment"></option>
  <option value="Compassion"></option>
  <option value="Empathy"></option>
  <option value="Admiration"></option>
  <option value="Awe"></option>
  <option value="Serenity"></option>
  <option value="Zeal"></option>
  <option value="Fondness"></option>
  <option value="Affirmation"></option>
  <option value="Trust"></option>
  <option value="Inspiration"></option>
  <option value="Motivation"></option>
  <option value="Courage"></option>
  <option value="Empowerment"></option>
  <option value="Security"></option>

  <!-- Negative Emotions -->
  <option value="Anxiety"></option>
  <option value="Fear"></option>
  <option value="Sadness"></option>
  <option value="Depression"></option>
  <option value="Loneliness"></option>
  <option value="Anger"></option>
  <option value="Frustration"></option>
  <option value="Guilt"></option>
  <option value="Shame"></option>
  <option value="Disgust"></option>
  <option value="Envy"></option>
  <option value="Jealousy"></option>
  <option value="Grief"></option>
  <option value="Remorse"></option>
  <option value="Embarrassment"></option>
  <option value="Insecurity"></option>
  <option value="Resentment"></option>
  <option value="Disappointment"></option>
  <option value="Exhaustion"></option>
  <option value="Overwhelm"></option>
  <option value="Panic"></option>
  <option value="Isolation"></option>
  <option value="Helplessness"></option>
  <option value="Bitterness"></option>
  <option value="Hopelessness"></option>
  <option value="Distrust"></option>
  <option value="Tension"></option>
  <option value="Numbness"></option>
  <option value="Self-doubt"></option>
  <option value="Rejection"></option>
  <option value="Betrayal"></option>
  <option value="Disapproval"></option>
  <option value="Contempt"></option>
  <option value="Antipathy"></option>
  <option value="Horror"></option>

  <!-- Neutral or Mixed Emotions -->
  <option value="Confusion"></option>
  <option value="Ambivalence"></option>
  <option value="Curiosity"></option>
  <option value="Nostalgia"></option>
  <option value="Surprise"></option>
  <option value="Indifference"></option>
  <option value="Apprehension"></option>
  <option value="Conflicted"></option>
</datalist>

      </section>
      <button type="submit">Resonate</button>
    </form>
     
    </div>
         <section id="formPost">
        <form action="/post" method="Post" class="formPost" style="flex-direction: column;
    gap: 10px;">
          <div class="up">
            <h1>Create a post</h1>
          </div>
          <div class="down">
            <textarea
              name="message"
              id="monami-input"
              maxlength="500"
              placeholder="Write your post here."
            ></textarea>
            <span>  <p id="char-count">0 / 500</p></span>
          
            <!-- Character counter display -->
          <input list="post-types" name="type" placeholder="Choose the post type" />
<datalist id="post-types">
  <option value="Articles">
  <option value="Posts">
</datalist>
<div class="btns">
     <button>Post</button>
    <a href="#"><button class="cancel" type="button">Cancel</button></a>
</div>

        </form>
      </section>
    <script>
  const textarea = document.getElementById("monami-input");
  const charCount = document.getElementById("char-count");
  const typeInput = document.querySelector('input[name="type"]');

  // Initial character counter
  textarea.addEventListener("input", () => {
    charCount.textContent = textarea.maxLength
      ? `${textarea.value.length} / ${textarea.maxLength}`
      : `${textarea.value.length} characters`;
  });

  // Change maxlength based on post type
  typeInput.addEventListener("input", () => {
    if (typeInput.value === "Articles") {
      textarea.removeAttribute("maxlength");
    } else {
      textarea.setAttribute("maxlength", "500");
      if (textarea.value.length > 500) {
        textarea.value = textarea.value.slice(0, 500); // trim it instantly
      }
    }

    // Force update count when switching type
    charCount.textContent = textarea.maxLength
      ? `${textarea.value.length} / ${textarea.maxLength}`
      : `${textarea.value.length} characters`;
  });
</script>
<script>
  const allowed = ["Articles", "Posts"];
  typeInput.addEventListener("input", () => {
    if (!allowed.includes(typeInput.value)) {
      typeInput.setCustomValidity("Choose one of the allowed post types.");
    } else {
      typeInput.setCustomValidity("");
    }
  });
</script>
  <script>
   function toggleBodyScroll() {
  if (window.location.hash === '#formPost') {
    document.body.style.overflow = 'hidden';   // Disable scroll when popup opened via hash
  } else {
    document.body.style.overflow = '';          // Enable scroll when hash removed
  }
}

// Initial check when page loads
window.addEventListener('DOMContentLoaded', toggleBodyScroll);

// Listen for any hash changes (like closing popup removes hash)
window.addEventListener('hashchange', toggleBodyScroll);
</script>
</main>
</div>
  </body>
</html>
<style>
    

.container {
    max-width: 450px;
    margin: 3rem auto;
    padding: 2.5rem 2rem 3rem;
    border-radius: 16px;
    font-family: 'Poppins', sans-serif;
    color: #0b1e44;
    display: flex
;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: 20px;
}
form#form {
  display: flex;
  flex-direction: column;
  gap: 1.8rem;
}

form#form input[type="text"],
form#form input[list] {
  padding: 0.9rem 1.3rem;
  font-size: 1.1rem;
  border-radius: 12px;
  border: 1px solid rgba(0,0,0,0.1);
  background: white;
  color: #1c74e4;
  font-weight: 600;
  outline-offset: 2px;
}



#tag label {
  display: block;
  font-weight: 700;
  font-size: 1rem;
  margin-bottom: 6px;
  color: #1c74e4;
  letter-spacing: 0.02em;
}

#tag br {
  line-height: 0.3;
}

button {
    padding: 12px;
    font-family: var(--font-family--);
    background-color: var(--Blue--);
    color: var(--White--);
    border: none;
}
button:hover{
                        background-color: var(--Blue--);
                        color: var(--White--);
}
/* Optional: datalist styling (limited browser support) */
datalist option {
  color: #1c74e4;
}

/* Responsive tweak */
@media (max-width: 480px) {
  .container {
    margin: 2rem 1rem;
    padding: 2rem 1.5rem 2.5rem;
  }
}
form#form input[type="text"], form#form input[list] {
    padding: 10px;
    font-size: 16px;
    border-radius: 12px;
    background: white;
    color: #1c74e4;
    font-weight: 600;
    outline-offset: 2px;
    width: 100%;
}
form#form{
                        width: 100%;
}
h1 {
    font-size: 2rem;
    font-weight: bold;
    color: var(--Black--);
}
button:hover{
  background-color: var(--Blue--) !important;
  
}
</style>
<script>
  const themeToggle = document.getElementById("themeToggle");
 const themeIcon = themeToggle.querySelector("span");
 
 // Load saved theme on page load
 const savedTheme = localStorage.getItem("theme");
 if (savedTheme) {
     document.documentElement.setAttribute("data-theme", savedTheme);
     themeIcon.textContent = savedTheme === "dark" ? "☀️" : "🌙";
 }
 
 // Toggle function
 themeToggle.addEventListener("click", () => {
     const currentTheme = document.documentElement.getAttribute("data-theme");
     const newTheme = currentTheme === "dark" ? "light" : "dark";
     document.documentElement.setAttribute("data-theme", newTheme);
     localStorage.setItem("theme", newTheme); // Save theme for all pages
     themeIcon.textContent = newTheme === "dark" ? "☀️" : "🌙";
 });
 
   
   </script>
   <style>
     body{
       background-color: var(--White--);
     }
     .themeToggle {
   display: flex;
   align-items: center;
   justify-content: flex-end !important;
   padding: 10px;
 }
 
 #themeToggle {
   width: 60px;
   height: 30px;
   border-radius: 30px;
   border: 1px solid var(--Black--) !important;
   background-color: var(--White--);
   position: relative;
   cursor: pointer;
   transition: background-color 0.3s ease;
 }
 
 #themeToggle .switch {
   position: absolute;
   top: 3px;
   left: 3px;
   width: 24px;
   height: 24px;
   background-color: var(--White--);
   border-radius: 50%;
   transition: transform 0.3s ease;
 }
 
 [data-theme="dark"] #themeToggle {
   background-color: var(--Blue--);
 }
 
 [data-theme="dark"] #themeToggle .switch {
   transform: translateX(30px);
 }
 
 
   
   </style>