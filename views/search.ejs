<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Search</title>
    <link rel="stylesheet" href="/CSS/search.css" />
    <link rel="stylesheet" href="/CSS/dashboard.css">
    <link rel="stylesheet" href="/CSS/post.css">
    <link rel="stylesheet" href="/CSS/main.css" />
    <link rel="stylesheet" href="/CSS/variables.css" />
      <link rel="icon" href="/Images/ciphry.png">
       <link href="https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap" rel="stylesheet">
  </head>
  <body>
    <div id="loader" class="loader">
      <div class="dot"></div>
      <div class="dot"></div>
      <div class="dot"></div>
    </div>
    <script>
      window.addEventListener("load", function () {
        const loader = document.getElementById("loader");
        loader.style.opacity = 0; // fade out
        setTimeout(() => {
          loader.style.display = "none"; // remove from DOM flow
        }, 400); // match with CSS transition
      });
    </script>
       <%- include('partials/navigation', { currentPage: 'search' }) %>
<div id="page-wrapper">


<main>
  <div class="themeToggle">
    <button id="themeToggle" class="toggle">
      <span class="switch"></span>
    </button>
  </div>
  
  
 
    <div class="container">
      <h1>Search Posts</h1>

      <form action="/search" method="get">
        <input
          type="text"
          name="q"
          placeholder="Type to search..."
          value="<%= query %>"
        />
        <button>
          <div class="search">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              stroke-width="1.5"
              stroke="currentColor"
              class="size-6"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                d="m21 21-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607Z"
              />
            </svg>
          </div>
        </button>
      </form>

      <div class="results">
        <% if (results.length === 0) { %>
        <p>No results found for "<%= query %>"</p>
        <% } else { %> <% results.forEach(post => { %>
        <div class="card">
          <p><%= post.message %></p>
          <small><%= post.timeago %></small>
        </div>

        <% }) %> <% } %>
      </div>
    </div>
         <section id="formPost">
        <form action="/post" method="Post" class="formPost">
          <div class="up">
            <h1>Create a post</h1>
          </div>
          <div class="down">
            <textarea
              name="message"
              id="monami-input"
              maxlength="500"
              placeholder="Write your post here."
            ></textarea>
            <span>  <p id="char-count">0 / 500</p></span>
          
            <!-- Character counter display -->
          <input list="post-types" name="type" placeholder="Choose the post type" />
<datalist id="post-types">
  <option value="Articles">
  <option value="Posts">
</datalist>
<div class="btns">
     <button>Post</button>
    <a href="#"><button class="cancel" type="button">Cancel</button></a>
</div>

        </form>
      </section>
    <script>
  const textarea = document.getElementById("monami-input");
  const charCount = document.getElementById("char-count");
  const typeInput = document.querySelector('input[name="type"]');

  // Initial character counter
  textarea.addEventListener("input", () => {
    charCount.textContent = textarea.maxLength
      ? `${textarea.value.length} / ${textarea.maxLength}`
      : `${textarea.value.length} characters`;
  });

  // Change maxlength based on post type
  typeInput.addEventListener("input", () => {
    if (typeInput.value === "Articles") {
      textarea.removeAttribute("maxlength");
    } else {
      textarea.setAttribute("maxlength", "500");
      if (textarea.value.length > 500) {
        textarea.value = textarea.value.slice(0, 500); // trim it instantly
      }
    }

    // Force update count when switching type
    charCount.textContent = textarea.maxLength
      ? `${textarea.value.length} / ${textarea.maxLength}`
      : `${textarea.value.length} characters`;
  });
</script>
<script>
  const allowed = ["Articles", "Posts"];
  typeInput.addEventListener("input", () => {
    if (!allowed.includes(typeInput.value)) {
      typeInput.setCustomValidity("Choose one of the allowed post types.");
    } else {
      typeInput.setCustomValidity("");
    }
  });
</script>
  <script>
   function toggleBodyScroll() {
  if (window.location.hash === '#formPost') {
    document.body.style.overflow = 'hidden';   // Disable scroll when popup opened via hash
  } else {
    document.body.style.overflow = '';          // Enable scroll when hash removed
  }
}

// Initial check when page loads
window.addEventListener('DOMContentLoaded', toggleBodyScroll);

// Listen for any hash changes (like closing popup removes hash)
window.addEventListener('hashchange', toggleBodyScroll);
</script>
</main>
</div>
  </body>
</html>

<script>
 const themeToggle = document.getElementById("themeToggle");
const themeIcon = themeToggle.querySelector("span");

// Load saved theme on page load
const savedTheme = localStorage.getItem("theme");
if (savedTheme) {
    document.documentElement.setAttribute("data-theme", savedTheme);
    themeIcon.textContent = savedTheme === "dark" ? "‚òÄÔ∏è" : "üåô";
}

// Toggle function
themeToggle.addEventListener("click", () => {
    const currentTheme = document.documentElement.getAttribute("data-theme");
    const newTheme = currentTheme === "dark" ? "light" : "dark";
    document.documentElement.setAttribute("data-theme", newTheme);
    localStorage.setItem("theme", newTheme); // Save theme for all pages
    themeIcon.textContent = newTheme === "dark" ? "‚òÄÔ∏è" : "üåô";
});

  
  </script>
  <style>
    body{
      background-color: var(--White--);
    }
    .themeToggle {
  display: flex;
  align-items: center;
  justify-content: flex-end;
  padding: 10px;
}

#themeToggle {
  width: 60px;
  height: 30px;
  border-radius: 30px;
  border: 1px solid var(--Black--) !important;
  background-color: var(--Gray--);
  position: relative;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

#themeToggle .switch {
  position: absolute;
  top: 3px;
  left: 3px;
  width: 24px;
  height: 24px;
  background-color: var(--White--);
  border-radius: 50%;
  transition: transform 0.3s ease;
}

[data-theme="dark"] #themeToggle {
  background-color: var(--Blue--) !important;
}

[data-theme="dark"] #themeToggle .switch {
  transform: translateX(30px);
}


  
  </style>