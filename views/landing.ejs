<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="/CSS/variables.css" />
    <link rel="stylesheet" href="/CSS/main.css" />
    <link rel="stylesheet" href="/CSS/dashboard.css" />
    <link rel="stylesheet" href="/CSS/post.css" />
    <link rel="icon" href="/Images/ciphry.png" />
    <!--FONT FAMILY-->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap"
      rel="stylesheet"
    />
    <meta
      name="description"
      content="Ciphree is a human-centered platform built to express emotion, connect deeply, and reflect reality through AI, design, and heart."
    />

    <!-- Google tag (gtag.js) -->
    <script
      async
      src="https://www.googletagmanager.com/gtag/js?id=G-MM8VSWME23"
    ></script>
    <title>Ciphree | Home</title>
    <!-- Tailwind CSS CDN -->
  <script src="https://cdn.tailwindcss.com"></script>
  <script>
    tailwind.config = {
      theme: {
        extend: {
          fontFamily: {
            poppins: ["Poppins", "sans-serif"],
          },
        },
      },
    };
  </script>
  <!-- Canonical URL -->
<link rel="canonical" href="https://ciphree.com/">

<!-- Keywords (optional but sometimes helpful) -->
<meta name="keywords" content="Ciphree, emotional platform, share feelings, journal, AI chat, mental health, connect with people">

<!-- Open Graph / Facebook -->
<meta property="og:title" content="Ciphree — Connect, Share, and Heal">
<meta property="og:description" content="Ciphree is a human-centered platform built to express emotion, connect deeply, and reflect reality through AI, design, and heart.">
<meta property="og:type" content="website">
<meta property="og:url" content="https://ciphree.com/">
<meta property="og:image" content="https://ciphree.com/Images/ciphry.png">
<meta property="og:site_name" content="Ciphree">

<!-- Twitter Card -->
<meta name="twitter:card" content="summary_large_image">
<meta name="twitter:title" content="Ciphree — Connect, Share, and Heal">
<meta name="twitter:description" content="Ciphree is a human-centered platform built to express emotion, connect deeply, and reflect reality through AI, design, and heart.">
<meta name="twitter:image" content="https://ciphree.com/Images/ciphry.png">

<!-- Structured Data (JSON-LD) -->
<script type="application/ld+json">
{
  "@context": "https://schema.org",
  "@type": "WebSite",
  "name": "Ciphree",
  "url": "https://ciphree.com/",
  "potentialAction": {
    "@type": "SearchAction",
    "target": "https://ciphree.com/search?q={search_term_string}",
    "query-input": "required name=search_term_string"
  }
}
</script>
<script async="" src="https://www.googletagmanager.com/gtag/js?id=G-MM8VSWME23"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-MM8VSWME23');
</script>
  </head>
  <body>
<%- include('partials/navigation', { currentPage: 'landing' }) %>
<canvas id="bg" class="fixed top-0 left-0 w-full h-full z-0 pointer-events-none"></canvas>

    <div class="themeToggle">
      <button id="themeToggle" class="toggle">
        <span class="switch"></span>
      </button>
    </div>
    <main class="main-content" id="main-content">
      
      
      <div class="greeting" id="greeting">Hi, <%=user.name%></div>
      <section id="text">
        <div class="question">What do you want to do today?</div>
        <section id="message" class="w-full bg-blue-50 border-l-4 border-blue-500 p-6 rounded-lg my-6 text-center max-w-3xl mx-auto shadow-sm">
          <p class="text-gray-800 text-lg md:text-xl">
            <a href="..." target="_blank" class="text-gray-800 hover:text-blue-600 hover:underline">
            If you are new to this website, click here to watch a video about it.
          </a>
          </p>
          
          
        </section>
      </section>
      
      
      <section id="actions">
        <div class="actions">

          <a href="/journal">
            <button class="action-btn" data-section="journal">
              Journal
            </button>
           
          </a>
          <a href="#formPost">
            <button class="action-btn" data-section="talk">
              Create a post
            </button>
          </a>
          <a href="/search">
            <button class="action-btn" data-section="find">Find a Post</button>
          </a>
          <a href="/matchup">
            <button class="action-btn" data-section="profile">Find a person</button>
          </a>
        </div>
      </section>
    </main>
    <section id="formPost">
        <form action="/post" method="Post" class="formPost">
          <div class="up">
            <h1>Create a post</h1>
          </div>
          <div class="down">
            <textarea
              name="message"
              id="monami-input"
              maxlength="500"
              placeholder="Write your post here."
            ></textarea>
            <span>  <p id="char-count">0 / 500</p></span>
          
            <!-- Character counter display -->
          <input list="post-types" name="type" placeholder="Choose the post type" />
<datalist id="post-types">
  <option value="Articles">
  <option value="Posts">
</datalist>
<div class="btns">
     <button>Post</button>
    <a href="#"><button class="cancel" type="button">Cancel</button></a>
</div>

        </form>
      </section>
      <!-- Video Popup Modal -->
<!-- Video Popup Modal -->
<!-- Video Popup Modal -->



</div>


  </body>
  <script src="/Js/post.js" defer></script>
  <script>
  const textarea = document.getElementById("monami-input");
  const charCount = document.getElementById("char-count");
  const typeInput = document.querySelector('input[name="type"]');

  // Initial character counter
  textarea.addEventListener("input", () => {
    charCount.textContent = textarea.maxLength
      ? `${textarea.value.length} / ${textarea.maxLength}`
      : `${textarea.value.length} characters`;
  });

  // Change maxlength based on post type
  typeInput.addEventListener("input", () => {
    if (typeInput.value === "Articles") {
      textarea.removeAttribute("maxlength");
    } else {
      textarea.setAttribute("maxlength", "500");
      if (textarea.value.length > 500) {
        textarea.value = textarea.value.slice(0, 500); // trim it instantly
      }
    }

    // Force update count when switching type
    charCount.textContent = textarea.maxLength
      ? `${textarea.value.length} / ${textarea.maxLength}`
      : `${textarea.value.length} characters`;
  });
</script>
<script>
  const allowed = ["Articles", "Posts"];
  typeInput.addEventListener("input", () => {
    if (!allowed.includes(typeInput.value)) {
      typeInput.setCustomValidity("Choose one of the allowed post types.");
    } else {
      typeInput.setCustomValidity("");
    }
  });

</script>
</html>
<style>
  .menu-item {
    padding: 15px 10px;
    cursor: pointer;
    border-radius: 6px;
    margin-bottom: 12px;
    transition: background 0.3s;
    display: flex;
    align-items: center;
    gap: 10px;
  }
  .menu-item:hover,
  .menu-item.active {
    background: #334155;
  }
  .menu-item i {
    font-style: normal;
    font-weight: 700;
    font-size: 1.2rem;
    width: 25px;
    text-align: center;
    user-select: none;
  }

  /* Main content */
  .main-content {
    flex-grow: 1;
    
    background: var(--White--);
    display: flex;
    flex-direction: column;
    margin-top: 0 !important;
    justify-content: center;
    align-items: center; /* This centers the actions box */
  }

  .greeting {
    font-size: 2rem;
    margin-bottom: 20px;
    color: var(--Black--);
  }

  .question {
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 1.3rem;
    margin-bottom: 30px;
    color: #555;
  }
  .actions {
    background: #e0e7ff;
    border-radius: 20px;
    padding: 50px 60px;
    width: 100%;
    max-width: 900px;
    box-shadow: 0 12px 30px rgba(0, 0, 0, 0.08);

    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 30px 40px;
    justify-items: center;
  }

  .action-btn {
    background: var(--Blue--, #2563eb);
    color: white;
    border: none;
    padding: 22px 0;
    border-radius: 14px;
    cursor: pointer;
    font-size: 1.25rem;
    font-weight: 700;
    transition: background 0.3s, box-shadow 0.3s;
    width: 100%;
    max-width: 320px;
    text-align: center;
    box-shadow: 0 4px 12px rgba(37, 99, 235, 0.4);
  }

  .action-btn:hover {
    background: var(--White--);
    box-shadow: 0 8px 18px rgba(37, 99, 235, 0.5);
  }

  @media (max-width: 700px) {
    .actions {
      grid-template-columns: 1fr;
      padding: 40px 30px;
    }
        .question{
      font-size: 1rem;
    }
      .action-btn{
      padding: 10px;
    }

  }
  #actions .actions a {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
  }
  
  section#actions {
    display: flex;
    justify-content: center;
    width: 100%;
    padding: 0 5vw; /* optional: side spacing for large screens */
    box-sizing: border-box;
  }

img.max-w-xsm.w-full
 {
    width: 100%;
    max-width: 450px;
}
#imgg{
    display: flex
;
    /* flex-wrap: wrap; */
    width: 100%;
    gap: 20px;
    padding: 20px;
}
#slide-bar li a{
  padding: 16px;
}

</style>
<script>
  const themeToggle = document.getElementById("themeToggle");
 const themeIcon = themeToggle.querySelector("span");
 
 // Load saved theme on page load
 const savedTheme = localStorage.getItem("theme");
 if (savedTheme) {
     document.documentElement.setAttribute("data-theme", savedTheme);
     themeIcon.textContent = savedTheme === "dark" ? "☀️" : "🌙";
 }
 
 // Toggle function
 themeToggle.addEventListener("click", () => {
     const currentTheme = document.documentElement.getAttribute("data-theme");
     const newTheme = currentTheme === "dark" ? "light" : "dark";
     document.documentElement.setAttribute("data-theme", newTheme);
     localStorage.setItem("theme", newTheme); // Save theme for all pages
     themeIcon.textContent = newTheme === "dark" ? "☀️" : "🌙";
 });
 
   
   </script>
   <style>
     body{
       background-color: var(--White--);
     }
     .themeToggle {
   display: flex;
   align-items: center;
   justify-content: flex-end !important;
   padding: 10px;
 }
 
 #themeToggle {
   width: 60px;
   height: 30px;
   border-radius: 30px;
   border: 1px solid var(--Black--) !important;
   background-color: var(--White--);
   position: relative;
   cursor: pointer;
   transition: background-color 0.3s ease;
 }
 
 #themeToggle .switch {
   position: absolute;
   top: 3px;
   left: 3px;
   width: 24px;
   height: 24px;
   background-color: var(--White--);
   border-radius: 50%;
   transition: transform 0.3s ease;
 }
 
 [data-theme="dark"] #themeToggle {
   background-color: var(--Blue--);
 }
 
 [data-theme="dark"] #themeToggle .switch {
   transform: translateX(30px);
 }
 
 main{
  min-height: 0vh;
 }
   
   </style>
   <script>
    function checkConnection() {
  if (navigator.onLine) {
    console.log("✅ You are online!");
    document.body.style.background = "lightgreen";
  } else {
    console.log("⚠️ You are offline! Retrying...");
    document.body.style.background = "lightcoral";
    
    // Try again every 5 seconds
    setTimeout(checkConnection, 5000);
  }
}

// Listen for connection changes
window.addEventListener("online", () => {
  console.log("🔌 Connection restored!");
  location.reload(); // reload or sync
});

window.addEventListener("offline", () => {
  console.log("📴 Lost connection...");
  checkConnection();
});

// Initial check
checkConnection();

    // Canvas background
    const canvas = document.getElementById('bg');
    const ctx = canvas.getContext('2d');
    let w = canvas.width = window.innerWidth;
    let h = canvas.height = window.innerHeight;
    const dots = [];
    for (let i=0;i<150;i++){
      dots.push({x:Math.random()*w, y:Math.random()*h, r:Math.random()*3+1, dx:(Math.random()-0.5), dy:(Math.random()-0.5), alpha:Math.random()*0.5+0.3});
    }
    function animate(){
      ctx.clearRect(0,0,w,h);
      dots.forEach(d=>{
        ctx.beginPath();
        ctx.arc(d.x,d.y,d.r,0,Math.PI*2);
        ctx.fillStyle = `rgba(59,130,246,${d.alpha})`;
        ctx.shadowColor='#3b82f6';
        ctx.shadowBlur=10;
        ctx.fill();
        d.x+=d.dx; d.y+=d.dy;
        if(d.x<0||d.x>w) d.dx*=-1;
        if(d.y<0||d.y>h) d.dy*=-1;
      });
      requestAnimationFrame(animate);
    }
    animate();
    window.addEventListener('resize', ()=>{ w=canvas.width=window.innerWidth; h=canvas.height=window.innerHeight; });

   </script>